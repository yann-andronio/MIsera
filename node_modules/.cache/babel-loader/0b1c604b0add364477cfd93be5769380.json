{"ast":null,"code":"import _classCallCheck from \"D:\\\\wamp64\\\\www\\\\js-node16-1\\\\app-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\wamp64\\\\www\\\\js-node16-1\\\\app-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\wamp64\\\\www\\\\js-node16-1\\\\app-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\wamp64\\\\www\\\\js-node16-1\\\\app-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\wamp64\\\\www\\\\js-node16-1\\\\app-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\wamp64\\\\www\\\\js-node16-1\\\\app-redux\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport ToDoList from './ToDoList';\nimport NavBar from './NavBar';\nimport AddTask from './AddTask';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'; // import initialData from '../initialData'\n// import uniqid from 'uniqid'\n// import Fetching from './Fetching'\n//import uniqid from 'uniqid';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // state = {\n    //   fetching: true,\n    //   tasks: []\n    // }\n    // componentDidMount = () => {\n    //   let delay = Math.floor(Math.random() * 5000)\n    //   console.log(delay)\n    //   setTimeout(() => {\n    //     this.setState({\n    //       fetching: false,\n    //       tasks : initialData\n    //     })\n    //   }, delay)\n    // }\n    // onAddTask = (newTaskName) => {\n    //   let newTask = {\n    //     id: uniqid(),\n    //     name: newTaskName,\n    //     completed: false\n    //   }\n    //   this.setState(prevState => ({\n    //     tasks: [...prevState.tasks, newTask]\n    //   }))\n    // }\n    // onToggleCompleted = (taskId) => {\n    //   //get the task to modify\n    //   let updTask = this.state.tasks.find(task => task.id === taskId)\n    //   //toggle the value of completed in the task\n    //   updTask.completed = !updTask.completed\n    //   //put the new version of the task in the state\n    //   this.setState(prevState => (\n    //     prevState.tasks.map(task => {\n    //       return task.id === taskId ? updTask : task\n    //     })\n    //   ))\n    // }\n    // onDeleteCompleted = () => {\n    //   this.setState(prevState => {\n    //     let newState = prevState.tasks.filter(task => !task.completed)\n    //     return {\n    //       tasks: newState\n    //     }\n    //   })\n    // }\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"section\", {\n        id: \"toDo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(BrowserRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        path: \"/add-task\",\n        component: AddTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/:filter?\",\n        component: ToDoList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(NavBar, {\n        onDeleteCompleted: this.onDeleteCompleted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      })))); //end return in render\n    } //end render\n\n  }]);\n\n  return App;\n}(Component); //end App class\n\n\nexport default App;","map":{"version":3,"sources":["D:/wamp64/www/js-node16-1/app-redux/src/components/App.js"],"names":["React","Component","ToDoList","NavBar","AddTask","BrowserRouter","Switch","Route","App","onDeleteCompleted"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAT,EAAyBC,MAAzB,EAAiCC,KAAjC,QAA6C,kBAA7C,C,CACA;AACA;AACA;AACA;;IAIMC,G;;;;;;;;;;;AAEJ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAEQ;AACN,0BACE;AAAS,QAAA,EAAE,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAwB,QAAA,SAAS,EAAEJ,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAwB,QAAA,SAAS,EAAEF,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADF,eAKE,oBAAC,MAAD;AAAQ,QAAA,iBAAiB,EAAE,KAAKO,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,CAFF,CADF,CADM,CAeL;AACF,K,CAAA;;;;;EArEgBR,S,GAwElB;;;AACD,eAAeO,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport ToDoList from './ToDoList'\nimport NavBar from './NavBar'\nimport AddTask from './AddTask'\nimport { BrowserRouter , Switch, Route} from 'react-router-dom'\n// import initialData from '../initialData'\n// import uniqid from 'uniqid'\n// import Fetching from './Fetching'\n//import uniqid from 'uniqid';\n\n\n\nclass App  extends Component {\n\n  // state = {\n  //   fetching: true,\n  //   tasks: []\n  // }\n\n  // componentDidMount = () => {\n  //   let delay = Math.floor(Math.random() * 5000)\n  //   console.log(delay)\n  //   setTimeout(() => {\n  //     this.setState({\n  //       fetching: false,\n  //       tasks : initialData\n  //     })\n  //   }, delay)\n  // }\n\n\n\n  // onAddTask = (newTaskName) => {\n  //   let newTask = {\n  //     id: uniqid(),\n  //     name: newTaskName,\n  //     completed: false\n  //   }\n  //   this.setState(prevState => ({\n  //     tasks: [...prevState.tasks, newTask]\n  //   }))\n  // }\n\n  // onToggleCompleted = (taskId) => {\n  //   //get the task to modify\n  //   let updTask = this.state.tasks.find(task => task.id === taskId)\n  //   //toggle the value of completed in the task\n  //   updTask.completed = !updTask.completed\n  //   //put the new version of the task in the state\n  //   this.setState(prevState => (\n  //     prevState.tasks.map(task => {\n  //       return task.id === taskId ? updTask : task\n  //     })\n  //   ))\n  // }\n\n  // onDeleteCompleted = () => {\n  //   this.setState(prevState => {\n  //     let newState = prevState.tasks.filter(task => !task.completed)\n  //     return {\n  //       tasks: newState\n  //     }\n  //   })\n  // }\n\n  render(){\n    return(\n      <section id=\"toDo\">\n        {/* {this.state.fetching? <Fetching /> : null} */}\n        <BrowserRouter>\n          <>\n            <Switch>\n                <Route path=\"/add-task\" component={AddTask} />\n                <Route path=\"/:filter?\" component={ToDoList} />\n            </Switch>\n            <NavBar onDeleteCompleted={this.onDeleteCompleted}/>\n          </>\n        </BrowserRouter>\n       \n    </section>\n    )//end return in render\n  }//end render\n\n\n}//end App class\nexport default App;\n"]},"metadata":{},"sourceType":"module"}